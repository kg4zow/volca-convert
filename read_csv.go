// volca-convert - read_csv.go
// John Simpson <jms1@jms1.net> 2022-08-27
//
// Read a CSV file into memory.

package main

import (
    "fmt"
    "os"
    "strconv"
    "encoding/csv"
)

///////////////////////////////////////////////////////////////////////////////
//
// Read a CSV file into memory.
//
// The file MUST start with the header rows generated by write_csv.go, as
// these end up being the key names used in memory.

func read_csv( filename string ) {
    var cell [][]string

    ////////////////////////////////////////
    // Open the file

    file, err := os.Open( filename )
    if err != nil {
        fmt.Printf( "ERROR: open(\"%s\"): %s\n" , filename , err )
        os.Exit( 1 )
    }
    defer file.Close()

    ////////////////////////////////////////
    // Read the file's contents

    csvr := csv.NewReader( file )

    cell , err = csvr.ReadAll()
    if err != nil {
        fmt.Printf( "ERROR: csv.ReadAll(\"%s\"): %s\n" , filename , err )
        os.Exit( 1 )
    }

    ////////////////////////////////////////
    // Make sure the file has the correct headers

    if ( cell[0][4] != "OP1" ) {
        fmt.Println( "ERROR: invalid CSV header" )
        os.Exit( 1 )
    }

    if ( cell[1][4] != "EGR1" ) {
        fmt.Println( "ERROR: invalid CSV header" )
        os.Exit( 1 )
    }

    ////////////////////////////////////////
    // Process rows

    for r := 2 ; r < len( cell ) ; r ++ {
        var v Voice
        v.param = make( map[string]byte )

        ////////////////////////////////////////
        // Store the name

        v.name = cell[r][0]

        ////////////////////////////////////////
        // Store the other fields
        // (header contain the field name)

        for c := 1 ; c < len( cell[r] ) ; c ++ {
            var k string

            ////////////////////////////////////////
            // Figure out the field name

            if ( cell[0][c] == "" ) {
                k = cell[1][c]
            } else {
                k = cell[0][c] + "." + cell[1][c]
            }

            ////////////////////////////////////////
            // Get the numeric value from the cell

            n , err := strconv.Atoi( cell[r][c] )
            if err != nil {
                fmt.Printf( "ERROR: row %d col %d not a number\n" , r , c )
                os.Exit( 1 )
            }

            if ( ( n < 0 ) || ( n > 127 ) ) {
                fmt.Printf( "ERROR: row %d col %d invalid value %d\n" , r , c , n )
                os.Exit( 1 )
            }

            v.param[k] = byte( n )
        }

        voices = append( voices , v )
    }
}
